{"version":3,"sources":["reducers/index.js","store.js","components/NewItemTodo/index.js","components/NewItemTodo/NewItemTodo.jsx","components/SelectAllTodo/index.js","components/SelectAllTodo/SelectAllTodo.jsx","actions/index.js","components/TodoList/TodoListItem/index.js","components/TodoList/TodoListItem/TodoListItem.jsx","components/TodoList/index.js","components/TodoList/TodoList.jsx","components/Footer/Filters/FilterItem/index.js","components/Footer/Filters/FilterItem/FilterItem.jsx","components/Footer/Filters/index.js","components/Footer/Filters/Filters.jsx","components/Footer/index.js","components/Footer/Footer.jsx","components/App/index.js","components/App/App.jsx","index.js"],"names":["initialState","arrayTodo","JSON","parse","localStorage","getItem","reducer","state","arguments","length","undefined","action","type","obj","concat","Object","toConsumableArray","filter","el","id","store","createStore","composeWithDevTools","NewItemTodo","_ref","addTodo","createElement","e","keyCode","target","value","Date","now","text","isComplete","react_default","a","className","onBlur","onKeyDown","placeholder","SelectAllTodo","onToggleAllClick","total","active","hidden","htmlFor","onClick","onChange","checked","removeTodo","toggleTodo","TodoListItem","isEdit","inputFocusRef","React","createRef","handleInputClick","_this$props","_this","props","onToggle","handleBtnDestroyClick","_this$props2","onRemove","handleLabelDblClick","setState","handleKeyDown","handleNewInputEdit","handleBlur","_this$props3","onEdit","this","current","focus","_this$props4","ref","defaultValue","onDoubleClick","PureComponent","TodoList","connect","dispatch","_bindActionCreators","bindActionCreators","actions","console","log","elements","map","item","TodoList_TodoListItem","assign","key","FilterItem","handleClick","onChangeFilter","isCurrent","filterName","filterLabel","defaultChecked","name","Filters","selectedFilter","label","_ref2","Filters_FilterItem","Footer","completed","onHandleClearCompletedClick","Footer_Filters","App","Fragment","components_SelectAllTodo","components_NewItemTodo","onAdd","handleAddElement","components_TodoList","components_Footer","Component","render","es","components_App","document","getElementById"],"mappings":"ocAAMA,EAAe,CACnBC,UAAWC,KAAKC,MAAMC,aAAaC,QAAQ,UAAY,IAkB1CC,EAhBC,WAAkC,IAAjCC,EAAiCC,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAzBR,EAAcW,EAAWH,UAAAC,OAAA,EAAAD,UAAA,QAAAE,EAChD,OAAQC,EAAOC,MACb,IAAK,WAAY,IACPC,EAAQF,EAARE,IAER,MADc,GAAAC,OAAAC,OAAAC,EAAA,EAAAD,CAAOR,GAAP,CAAc,CAAEM,SAGhC,IAAK,cAEH,OADiBN,EAAMU,OAAO,SAAAC,GAAE,OAAIA,EAAGC,KAAOR,EAAOQ,KAGvD,QACE,OAAOZ,EAAMN,YCTJmB,EAFDC,sBAAYf,EAASgB,oECFpBC,SCEK,SAAAC,GAEd,IADJC,EACID,EADJC,QAEMC,EAAgB,SAACC,GACrB,KAAKA,EAAEC,SAAyB,KAAdD,EAAEC,UACK,KAAnBD,EAAEE,OAAOC,MAAc,CACzB,IAAMjB,EAAM,CAAEM,GAAIY,KAAKC,MAAOC,KAAMN,EAAEE,OAAOC,MAAOI,YAAY,GAChET,EAAQZ,GACRc,EAAEE,OAAOC,MAAQ,KAcvB,OACEK,EAAAC,EAAAV,cAAA,SACEW,UAAU,mBACVC,OAZe,SAACX,GAClBD,EAAcC,IAYZY,UATkB,SAACZ,GACrBD,EAAcC,IASZa,YAAY,6BC7BHC,SCEO,SAAAjB,GAAA,IAElBkB,EAFkBlB,EAElBkB,iBACAC,EAHkBnB,EAGlBmB,MACAC,EAJkBpB,EAIlBoB,OAJkB,OAOpBT,EAAAC,EAAAV,cAAA,SACEW,UAAU,mBACVQ,OAAkB,IAAVF,EACRG,QAAQ,cAERX,EAAAC,EAAAV,cAAA,SACEqB,QAASL,EACTM,SAAU,aACVC,QAAoB,IAAXL,EACThC,KAAK,WACLO,GAAG,aACHkB,UAAU,eAEZF,EAAAC,EAAAV,cAAA,QAAMW,UAAU,yBCxBda,EAAa,SAAA/B,GAAE,MAAK,CAAEP,KAAM,cAAeO,OAC3CgC,EAAa,SAAChC,EAAIe,GAAL,MAAqB,CACtCtB,KAAM,cACNO,KACAe,eAEIT,EAAU,SAAAZ,GAAG,MAAK,CACtBD,KAAM,WAAYC,QCLLuC,oNCIb7C,MAAQ,CAAE8C,QAAQ,KAElBC,cAAgBC,IAAMC,cAUtBC,iBAAmB,WAAM,IAAAC,EACcC,EAAKC,MAAlCzC,EADeuC,EACfvC,GAAIe,EADWwB,EACXxB,YACZ2B,EAFuBH,EACCG,UACf1C,EAAIe,MAGf4B,sBAAwB,WAAM,IAAAC,EACHJ,EAAKC,MAAtBzC,EADoB4C,EACpB5C,IACR6C,EAF4BD,EAChBC,UACH7C,MAIX8C,oBAAsB,WACpBN,EAAKO,SAAS,CAAEb,QAAQ,OAG1Bc,cAAgB,SAACxC,GACfgC,EAAKS,mBAAmBzC,MAG1B0C,WAAa,SAAC1C,GACZgC,EAAKS,mBAAmBzC,MAG1ByC,mBAAqB,SAACzC,GAAM,IAAA2C,EACOX,EAAKC,MAA9BzC,EADkBmD,EAClBnD,GAAIoD,EADcD,EACdC,OAAQP,EADMM,EACNN,SACLL,EAAKC,MAAd3B,KACDN,EAAEC,SAAyB,KAAdD,EAAEC,UACK,KAAnBD,EAAEE,OAAOC,OAEXyC,EAAOpD,EADAQ,EAAEE,OAAOC,OAEhB6B,EAAKO,SAAS,CAAEb,QAAQ,KAExBW,EAAS7C,yFAvCMqD,KAAKjE,MAAhB8C,QAENmB,KAAKlB,cAAcmB,QAAQC,yCA0CtB,IAAAC,EACsBH,KAAKZ,MAA1B3B,EADD0C,EACC1C,KAAMC,EADPyC,EACOzC,WACNmB,EAAWmB,KAAKjE,MAAhB8C,OACR,OACElB,EAAAC,EAAAV,cAAA,MAAIW,UAAU,QACZF,EAAAC,EAAAV,cAAA,OAAKW,UAAU,gBACbF,EAAAC,EAAAV,cAAA,SACEqB,QAASyB,KAAKf,iBACdT,SAAU,aACVX,UAAU,WACVzB,KAAK,WACLqC,QAASf,IAEVmB,EACClB,EAAAC,EAAAV,cAAA,SACEW,UAAU,OACVuC,IAAKJ,KAAKlB,cACVhB,OAAQkC,KAAKH,WACb9B,UAAWiC,KAAKL,cAChBU,aAAc5C,IAGhBE,EAAAC,EAAAV,cAAA,QAAMW,UAAU,UAAUyC,cAAeN,KAAKP,qBAC3ChC,GAGLE,EAAAC,EAAAV,cAAA,UACEW,UAAU,UACVzB,KAAK,SACLmC,QAASyB,KAAKV,iCA/EgBiB,kBCH3BC,SCsCAC,YAfS,SAAA1E,GAAK,MAAK,CAChCN,UAAWM,IAEc,SAAC2E,GAAa,IAAAC,EACJC,6BAAmBC,EAASH,GAAvDhC,EAD+BiC,EAC/BjC,WAAYC,EADmBgC,EACnBhC,WAEpB,OADAmC,QAAQC,IAAIrC,GACL,CACLA,WAAY,SAAC/B,GACX+B,EAAW/B,IAEbgC,WAAY,SAAChC,EAAIe,GACfiB,EAAWhC,EAAIe,MAIN+C,CA/BE,SACfrB,GACG,IACK3D,EAA0B2D,EAA1B3D,UAAWiD,EAAeU,EAAfV,WACbsC,EAAWvF,EAAUwF,IAAI,SAAAC,GAAI,OACjCvD,EAAAC,EAAAV,cAACiE,EAAD5E,OAAA6E,OAAA,CACEC,IAAKH,EAAKvE,IACNuE,EAFN,CAIE1B,SAAUd,OAKd,OAAOf,EAAAC,EAAAV,cAAA,MAAIW,UAAU,aAAamD,MCrBrBM,6MCEbC,YAAc,SAACpE,IAEbqE,EAD2BrC,EAAKC,MAAxBoC,gBACOrE,EAAEE,OAAOV,6EAGjB,IAAAuC,EAKHc,KAAKZ,MAHPqC,EAFKvC,EAELuC,UACAC,EAHKxC,EAGLwC,WACAC,EAJKzC,EAILyC,YAEF,OACEhE,EAAAC,EAAAV,cAAA,MAAIW,UAAU,iBACZF,EAAAC,EAAAV,cAAA,SACEW,UAAU,SACV+D,eAAgBH,EAChBrF,KAAK,QACLyF,KAAK,QACLlF,GAAI+E,EACJnD,QAASyB,KAAKuB,cAEhB5D,EAAAC,EAAAV,cAAA,SACEoB,QAASoD,EACT7D,UAAW6D,GAEVC,WA1B6BpB,iBCDzBuB,SCIC,SAAA9E,GAGV,IAFJ+E,EAEI/E,EAFJ+E,eACAP,EACIxE,EADJwE,eAQMR,EANU,CACd,CAAEa,KAAM,MAAOG,MAAO,OACtB,CAAEH,KAAM,SAAUG,MAAO,UACzB,CAAEH,KAAM,YAAaG,MAAO,cAGLf,IAAI,SAAAgB,GAAA,IAAGJ,EAAHI,EAAGJ,KAAMG,EAATC,EAASD,MAAT,OAC3BrE,EAAAC,EAAAV,cAACgF,EAAD,CACEb,IAAKQ,EACLH,WAAYG,EACZF,YAAaK,EACbR,eAAgBA,EAChBC,UAAWM,IAAmBF,MAGlC,OAAOlE,EAAAC,EAAAV,cAAA,MAAIW,UAAU,WAAWmD,KCvBnBmB,ECEA,SAAAnF,GAAA,IACbmB,EADanB,EACbmB,MACAC,EAFapB,EAEboB,OACAgE,EAHapF,EAGboF,UACAL,EAJa/E,EAIb+E,eACAM,EALarF,EAKbqF,4BACAb,EANaxE,EAMbwE,eANa,OAQb7D,EAAAC,EAAAV,cAAA,UAAQW,UAAS,UAAAvB,OAAsB,IAAV6B,EAAc,UAAY,KACrDR,EAAAC,EAAAV,cAAA,QAAMW,UAAU,WAAhB,GAAAvB,OACM8B,EADN,gBAGAT,EAAAC,EAAAV,cAACoF,EAAD,CAASP,eAAgBA,EAAgBP,eAAgBA,IACzD7D,EAAAC,EAAAV,cAAA,UACEW,UAAU,kBACVzB,KAAK,SACLiC,OAAsB,IAAd+D,EACR7D,QAAS8D,GAJX,qBCfWE,0LCsGX,OACE5E,EAAAC,EAAAV,cAAAS,EAAAC,EAAA4E,SAAA,KACE7E,EAAAC,EAAAV,cAACuF,EAAD,MACA9E,EAAAC,EAAAV,cAACwF,EAAD,CAAaC,MAAO3C,KAAK4C,mBACzBjF,EAAAC,EAAAV,cAAC2F,EAAD,MACAlF,EAAAC,EAAAV,cAAC4F,EAAD,cAtGyBC,cCDjCC,iBACErF,EAAAC,EAAAV,cAAC+F,EAAA,EAAD,CAAUrG,MAAOA,GACfe,EAAAC,EAAAV,cAACgG,EAAD,OACWC,SAASC,eAAe","file":"static/js/main.2097a09b.chunk.js","sourcesContent":["const initialState = {\r\n  arrayTodo: JSON.parse(localStorage.getItem('todo')) || [],\r\n};\r\nconst reducer = (state = initialState, action) => {\r\n  switch (action.type) {\r\n    case 'ADD_TODO': {\r\n      const { obj } = action;\r\n      const newState = [...state, { obj }];\r\n      return newState;\r\n    }\r\n    case 'REMOVE_TODO': {\r\n      const newState = state.filter(el => el.id !== action.id);\r\n      return newState;\r\n    }\r\n    default:\r\n      return state.arrayTodo;\r\n  }\r\n};\r\n\r\nexport default reducer;\r\n","import { createStore } from 'redux';\r\nimport { composeWithDevTools } from 'redux-devtools-extension';\r\nimport reducer from './reducers';\r\n\r\nconst store = createStore(reducer, composeWithDevTools());\r\n\r\nexport default store;\r\n","import NewItemTodo from './NewItemTodo';\r\n\r\nexport default NewItemTodo;\r\n","import React from 'react';\r\nimport './NewItemTodo.css';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst NewItemTodo = ({\r\n  addTodo,\r\n}) => {\r\n  const createElement = (e) => {\r\n    if (!e.keyCode || e.keyCode === 13) {\r\n      if (e.target.value !== '') {\r\n        const obj = { id: Date.now(), text: e.target.value, isComplete: false };\r\n        addTodo(obj);\r\n        e.target.value = '';\r\n      }\r\n    }\r\n  };\r\n\r\n  const handleBlur = (e) => {\r\n    createElement(e);\r\n  };\r\n\r\n  const handleKeyDown = (e) => {\r\n    createElement(e);\r\n  };\r\n\r\n\r\n  return (\r\n    <input\r\n      className=\"header__new-item\"\r\n      onBlur={handleBlur}\r\n      onKeyDown={handleKeyDown}\r\n      placeholder=\"What needs to be done?\"\r\n    />\r\n  );\r\n};\r\n\r\nNewItemTodo.propTypes = {\r\n  addTodo: PropTypes.func.isRequired,\r\n};\r\nexport default NewItemTodo;\r\n","import SelectAllTodo from './SelectAllTodo';\r\n\r\nexport default SelectAllTodo;\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport './SelectAllTodo.css';\r\n\r\nconst SelectAllTodo = (\r\n  {\r\n    onToggleAllClick,\r\n    total,\r\n    active,\r\n  },\r\n) => (\r\n  <label\r\n    className=\"label-select-all\"\r\n    hidden={total === 0}\r\n    htmlFor=\"select-all\"\r\n  >\r\n    <input\r\n      onClick={onToggleAllClick}\r\n      onChange={() => {}}\r\n      checked={active === 0}\r\n      type=\"checkbox\"\r\n      id=\"select-all\"\r\n      className=\"select-all\"\r\n    />\r\n    <span className=\"select-all-pseudo\" />\r\n  </label>\r\n);\r\nexport default SelectAllTodo;\r\n\r\nSelectAllTodo.propTypes = {\r\n  onToggleAllClick: PropTypes.func.isRequired,\r\n  total: PropTypes.number.isRequired,\r\n  active: PropTypes.number.isRequired,\r\n};\r\n","const removeTodo = id => ({ type: 'REMOVE_TODO', id });\r\nconst toggleTodo = (id, isComplete) => ({\r\n  type: 'TOGGLE_TODO',\r\n  id,\r\n  isComplete,\r\n});\r\nconst addTodo = obj => ({\r\n  type: 'ADD_TODO', obj,\r\n});\r\n\r\nexport {\r\n  removeTodo,\r\n  toggleTodo,\r\n  addTodo,\r\n};\r\n","import TodoListItem from './TodoListItem';\r\n\r\nexport default TodoListItem;\r\n","import React, { PureComponent } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport './TodoListItem.css';\r\n\r\n\r\nexport default class TodoListItem extends PureComponent {\r\n  state = { isEdit: false };\r\n\r\n  inputFocusRef = React.createRef();\r\n\r\n  componentDidUpdate() {\r\n    const { isEdit } = this.state;\r\n    if (isEdit) {\r\n      this.inputFocusRef.current.focus();\r\n    }\r\n  }\r\n\r\n\r\n  handleInputClick = () => {\r\n    const { id, isComplete, onToggle } = this.props;\r\n    onToggle(id, isComplete);\r\n  };\r\n\r\n  handleBtnDestroyClick = () => {\r\n    const { id, onRemove } = this.props;\r\n    onRemove(id);\r\n  };\r\n\r\n\r\n  handleLabelDblClick = () => {\r\n    this.setState({ isEdit: true });\r\n  };\r\n\r\n  handleKeyDown = (e) => {\r\n    this.handleNewInputEdit(e);\r\n  };\r\n\r\n  handleBlur = (e) => {\r\n    this.handleNewInputEdit(e);\r\n  };\r\n\r\n  handleNewInputEdit = (e) => {\r\n    const { id, onEdit, onRemove } = this.props;\r\n    let { text } = this.props;\r\n    if (!e.keyCode || e.keyCode === 13) {\r\n      if (e.target.value !== '') {\r\n        text = e.target.value;\r\n        onEdit(id, text);\r\n        this.setState({ isEdit: false });\r\n      } else {\r\n        onRemove(id);\r\n      }\r\n    }\r\n  };\r\n\r\n  render() {\r\n    const { text, isComplete } = this.props;\r\n    const { isEdit } = this.state;\r\n    return (\r\n      <li className=\"item\">\r\n        <div className=\"content-wrap\">\r\n          <input\r\n            onClick={this.handleInputClick}\r\n            onChange={() => {}}\r\n            className=\"complete\"\r\n            type=\"checkbox\"\r\n            checked={isComplete}\r\n          />\r\n          {isEdit ? (\r\n            <input\r\n              className=\"edit\"\r\n              ref={this.inputFocusRef}\r\n              onBlur={this.handleBlur}\r\n              onKeyDown={this.handleKeyDown}\r\n              defaultValue={text}\r\n            />\r\n          ) : (\r\n            <span className=\"caption\" onDoubleClick={this.handleLabelDblClick}>\r\n              {text}\r\n            </span>\r\n          )}\r\n          <button\r\n            className=\"destroy\"\r\n            type=\"submit\"\r\n            onClick={this.handleBtnDestroyClick}\r\n          />\r\n        </div>\r\n      </li>\r\n    );\r\n  }\r\n}\r\nTodoListItem.propTypes = {\r\n  id: PropTypes.number.isRequired,\r\n  text: PropTypes.string.isRequired,\r\n  isComplete: PropTypes.bool.isRequired,\r\n  onEdit: PropTypes.func.isRequired,\r\n  onToggle: PropTypes.func.isRequired,\r\n  onRemove: PropTypes.func.isRequired,\r\n};\r\n","import TodoList from './TodoList';\r\n\r\nexport default TodoList;\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { bindActionCreators } from 'redux';\r\nimport { connect } from 'react-redux';\r\nimport * as actions from '../../actions';\r\nimport TodoListItem from './TodoListItem/index';\r\nimport './TodoList.css';\r\n\r\n\r\nconst TodoList = (\r\n  props,\r\n) => {\r\n  const { arrayTodo, removeTodo } = props;\r\n  const elements = arrayTodo.map(item => (\r\n    <TodoListItem\r\n      key={item.id}\r\n      {...item}\r\n      // onToggle={onToggle}\r\n      onRemove={removeTodo}\r\n      // onEdit={onEdit}\r\n    />\r\n\r\n  ));\r\n  return <ul className=\"todo-list\">{elements}</ul>;\r\n};\r\nconst mapStateToProps = state => ({\r\n  arrayTodo: state,\r\n});\r\nconst mapDispatchToProps = (dispatch) => {\r\n  const { removeTodo, toggleTodo } = bindActionCreators(actions, dispatch);\r\n  console.log(removeTodo);\r\n  return {\r\n    removeTodo: (id) => {\r\n      removeTodo(id);\r\n    },\r\n    toggleTodo: (id, isComplete) => {\r\n      toggleTodo(id, isComplete);\r\n    },\r\n  };\r\n};\r\nexport default connect(mapStateToProps, mapDispatchToProps)(TodoList);\r\nTodoList.propTypes = {\r\n  arrayTodo: PropTypes.arrayOf(PropTypes.object).isRequired,\r\n  onEdit: PropTypes.func.isRequired,\r\n  // onToggle: PropTypes.func.isRequired,\r\n  removeTodo: PropTypes.func.isRequired,\r\n};\r\n","import FilterItem from './FilterItem';\r\n\r\nexport default FilterItem;\r\n","import React, { PureComponent } from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nexport default class FilterItem extends PureComponent {\r\n  handleClick = (e) => {\r\n    const { onChangeFilter } = this.props;\r\n    onChangeFilter(e.target.id);\r\n  };\r\n\r\n  render() {\r\n    const {\r\n      isCurrent,\r\n      filterName,\r\n      filterLabel,\r\n    } = this.props;\r\n    return (\r\n      <li className=\"filters__item\">\r\n        <input\r\n          className=\"filter\"\r\n          defaultChecked={isCurrent}\r\n          type=\"radio\"\r\n          name=\"group\"\r\n          id={filterName}\r\n          onClick={this.handleClick}\r\n        />\r\n        <label\r\n          htmlFor={filterName}\r\n          className={filterName}\r\n        >\r\n          {filterLabel}\r\n        </label>\r\n      </li>\r\n    );\r\n  }\r\n}\r\nFilterItem.propTypes = {\r\n  onChangeFilter: PropTypes.func.isRequired,\r\n  isCurrent: PropTypes.bool.isRequired,\r\n  filterName: PropTypes.string.isRequired,\r\n  filterLabel: PropTypes.string.isRequired,\r\n};\r\n","import Filters from './Filters';\r\n\r\nexport default Filters;\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport FilterItem from './FilterItem/index';\r\nimport './Filters.css';\r\n\r\n\r\nconst Filters = ({\r\n  selectedFilter,\r\n  onChangeFilter,\r\n}) => {\r\n  const filters = [\r\n    { name: 'all', label: 'All' },\r\n    { name: 'active', label: 'Active' },\r\n    { name: 'completed', label: 'Completed' },\r\n  ];\r\n\r\n  const elements = filters.map(({ name, label }) => (\r\n    <FilterItem\r\n      key={name}\r\n      filterName={name}\r\n      filterLabel={label}\r\n      onChangeFilter={onChangeFilter}\r\n      isCurrent={selectedFilter === name}\r\n    />\r\n  ));\r\n  return <ul className=\"filters\">{elements}</ul>;\r\n};\r\nexport default Filters;\r\n\r\nFilters.propTypes = {\r\n  selectedFilter: PropTypes.string.isRequired,\r\n  onChangeFilter: PropTypes.func.isRequired,\r\n};\r\n","import Footer from './Footer';\r\n\r\nexport default Footer;\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport Filters from './Filters';\r\n\r\nconst Footer = ({\r\n  total,\r\n  active,\r\n  completed,\r\n  selectedFilter,\r\n  onHandleClearCompletedClick,\r\n  onChangeFilter,\r\n}) => (\r\n  <footer className={`footer ${total === 0 ? ' hidden' : ''}`}>\r\n    <span className=\"counter\">\r\n      {`${active} items left`}\r\n    </span>\r\n    <Filters selectedFilter={selectedFilter} onChangeFilter={onChangeFilter} />\r\n    <button\r\n      className=\"clear-completed\"\r\n      type=\"submit\"\r\n      hidden={completed === 0}\r\n      onClick={onHandleClearCompletedClick}\r\n    >\r\n            Clear completed\r\n    </button>\r\n  </footer>\r\n);\r\n\r\nFooter.propTypes = {\r\n  total: PropTypes.number.isRequired,\r\n  active: PropTypes.number.isRequired,\r\n  completed: PropTypes.number.isRequired,\r\n  selectedFilter: PropTypes.string.isRequired,\r\n  onHandleClearCompletedClick: PropTypes.func.isRequired,\r\n  onChangeFilter: PropTypes.func.isRequired,\r\n};\r\nexport default Footer;\r\n","import App from \"./App\";\r\n\r\nexport default App;\r\n","import React, { Component } from 'react';\r\nimport NewItemTodo from '../NewItemTodo';\r\nimport SelectAllTodo from '../SelectAllTodo';\r\nimport TodoList from '../TodoList';\r\nimport Footer from '../Footer';\r\nimport './App.css';\r\n\r\nexport default class App extends Component {\r\n  /* / state = {\r\n    arrayTodo: JSON.parse(localStorage.getItem('todo')) || [],\r\n    filter: localStorage.getItem('filter') || 'all',\r\n  };\r\n\r\n  componentDidUpdate() {\r\n    this.saveToStorage();\r\n  }\r\n\r\n  handleAddElement = (obj) => {\r\n    const { arrayTodo } = this.state;\r\n    this.setState({\r\n      arrayTodo: [...arrayTodo, obj],\r\n    });\r\n  };\r\n\r\n\r\n  handleEditElement = (id, text) => {\r\n    const { arrayTodo } = this.state;\r\n    this.setState({\r\n      arrayTodo: arrayTodo.map(el => (el.id === id ? { ...el, text } : el)),\r\n    });\r\n  };\r\n\r\n  /* /handleRemoveElement = (id) => {\r\n    const { arrayTodo } = this.state;\r\n    const removeIndex = arrayTodo.findIndex(el => el.id === id);\r\n    this.setState({\r\n      arrayTodo: [\r\n        ...arrayTodo.slice(0, removeIndex),\r\n        ...arrayTodo.slice(removeIndex + 1),\r\n      ],\r\n    });\r\n  };\r\n\r\n  handleToggleElement = (id, isComplete) => {\r\n    const { arrayTodo } = this.state;\r\n    const changeIndex = arrayTodo.findIndex(el => el.id === id);\r\n    const updatedObj = Object.assign({}, arrayTodo[changeIndex], { isComplete: !isComplete });\r\n    this.setState({\r\n      arrayTodo: [\r\n        ...arrayTodo.slice(0, changeIndex),\r\n        updatedObj,\r\n        ...arrayTodo.slice(changeIndex + 1),\r\n      ],\r\n    });\r\n  };\r\n\r\n  saveToStorage = () => {\r\n    const { arrayTodo } = this.state;\r\n    const str = JSON.stringify(arrayTodo);\r\n    localStorage.setItem('todo', str);\r\n  };\r\n\r\n  handleChangeFilter = (filterName) => {\r\n    this.setState({ filter: filterName });\r\n    localStorage.setItem('filter', filterName);\r\n  };\r\n\r\n  getFilter = (filterName) => {\r\n    const { arrayTodo } = this.state;\r\n    switch (filterName) {\r\n      case 'all':\r\n        return arrayTodo;\r\n      case 'completed':\r\n        return arrayTodo.filter(item => item.isComplete);\r\n      case 'active':\r\n        return arrayTodo.filter(item => !item.isComplete);\r\n      default:\r\n        return arrayTodo;\r\n    }\r\n  };\r\n\r\n  handleClearCompletedClick = () => {\r\n    const { arrayTodo } = this.state;\r\n    this.setState({\r\n      arrayTodo: arrayTodo.filter(item => !item.isComplete),\r\n    });\r\n  };\r\n\r\n  handleToggleAllClick = (e) => {\r\n    const { arrayTodo } = this.state;\r\n    this.setState({\r\n      arrayTodo: arrayTodo.map(el => ({\r\n        ...el,\r\n        isComplete: e.target.checked,\r\n      })),\r\n    });\r\n  };\r\n/ */\r\n  render() {\r\n  //  const { arrayTodo, filter } = this.state;\r\n    // const total = arrayTodo.length;\r\n    // const active = arrayTodo.filter(item => !item.isComplete).length;\r\n    // const completed = arrayTodo.filter(item => item.isComplete).length;\r\n    // const filterItems = this.getFilter(filter);\r\n    return (\r\n      <>\r\n        <SelectAllTodo />\r\n        <NewItemTodo onAdd={this.handleAddElement} />\r\n        <TodoList />\r\n        <Footer />\r\n      </>\r\n    );\r\n  }\r\n}\r\n","import React from 'react';\nimport { render } from 'react-dom';\nimport { Provider } from 'react-redux';\nimport store from './store';\nimport App from './components/App';\n\nrender(\n  <Provider store={store}>\n    <App />\n  </Provider>, document.getElementById('root'),\n);\n"],"sourceRoot":""}